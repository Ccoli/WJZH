<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ assembly name="C:\Users\Administrator\.nuget\packages\MySql.Data\8.0.15\lib\net452\MySql.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="MySql.Data.MySqlClient" #>

<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>


<# 
    var OutputPath1 = Path.GetDirectoryName(Host.TemplateFile)+"\\work";
	if (!Directory.Exists(OutputPath1))
	{
	    Directory.CreateDirectory(OutputPath1);
	}
	#> 
<# var manager = new Manager(Host, GenerationEnvironment, true) { OutputPath = OutputPath1 }; #>

<# 
	var tableName=config.TableName;
 #>
<# 
if(tableName!=""){
    #>  
<# manager.StartBlock(tableName +"Controllers"+".cs"); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using <#=config.ModelNameSpace#>;
using <#=config.IServicesNameSpace#>;

namespace <#=config.ControllersNameSpace#>
{	
	/// <summary>
	/// <#=tableName#>Controllers
	/// </summary>	
	[Produces("application/json")]
	[Route("api/[controller]")]
    [ApiController]
	public class <#=tableName#>Controller : ControllerBase
    { 
		 readonly I<#=tableName#>Services _<#=tableName#>Services;

		 /// <summary>
        /// 构造函数
        /// </summary>
        /// <returns></returns>
        public <#=tableName#>Controller(I<#=tableName#>Services <#=tableName#>Services)
        {
            _<#=tableName#>Services = <#=tableName#>Services;
        }
		/// <summary>
		///查询所有数据
		/// </summary>	
		 [HttpGet]
        public async Task<List<<#=tableName#>>> Get()
        {
            return await _<#=tableName#>Services.Query();
        }

		/// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="page"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("getpage")]
        public async Task<PageModel<<#=tableName#>>> GetPage(int page)
        {
            return await _<#=tableName#>Services.Query("", page, 2, "");
        }

        /// <summary>
		///根据id查询数据
		/// </summary>
        [HttpGet("{id}")]
        public async Task<List<<#=tableName#>>> Get(int id)
        {
            return await _<#=tableName#>Services.Query(c => c.ID == id);
        }

        /// <summary>
		/// 使用post方法添加数据
		/// </summary>
        [HttpPost]
       public async Task<MessageModel<string>> Post([FromBody] <#=tableName#> <#=tableName#>)
        {
			var data = new MessageModel<string>();

            var id = (await _<#=tableName#>Services.Add(<#=tableName#>));
            data.success = id > 0;
            if (data.success)
            {
                data.response = id.ObjToString();
                data.msg = "添加成功";
            }

            return data;
        }

         /// <summary>
		///使用put方法更新数据
		/// </summary>
        [HttpPut]
        public async Task<MessageModel<string>> Update([FromBody] <#=tableName#> <#=tableName#>)
        {
			var data = new MessageModel<string>();
            if (<#=tableName#> != null && <#=tableName#>.ID > 0)
            {
                var id = (await _<#=tableName#>Services.Update(<#=tableName#>));
                data.success = id;
                if (data.success)
                {
                    data.response = "id为" +<#=tableName#>.ID.ToString() + "的数据更新成功";
                    data.msg = "更新成功";
                }
                else
                {
                    data.response = "id为" +<#=tableName#>.ID.ToString() + "的数据不存在";
                }
            }

            return data;
        }

        /// <summary>
		/// 使用get方法删除数据
		/// </summary>
        [HttpGet]
        [Route("delete")]
		 public async Task<MessageModel<string>> Delete(int id)
        {
            var flag = (await _<#=tableName#>Services.DeleteById(id));
            var data = new MessageModel<string>();
            data.success = flag;
            if (flag)
            {
                data.response = id.ToString()+"数据删除";
                data.msg = "删除成功";
            }
            else
            {
                data.response ="id为"+ id.ToString() + "的数据找不到";
                data.msg = "删除失败";
            }

            return data;
        }

		/// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("deletemuch")]
        public async Task<MessageModel<string>> DeleteMuch([FromBody] object[] id)
        {
            var flag = (await _<#=tableName#>Services.DeleteByIds(id));
            var data = new MessageModel<string>();
            data.success = flag;
            if (flag)
            {
                data.response = string.Join(",", id) + "数据删除";
                data.msg = "删除成功";
            }
            else
            {
                data.response = "id为" + id.ToString() + "的数据找不到";
                data.msg = "删除失败";
            }

            return data;
        }
    }
}

<# 
  manager.EndBlock();
  manager.Process(true);
    } else{ 

	#>

<# 
    MySqlConnection conn = new MySqlConnection(config.ConnectionString); 
    conn.Open(); 
    System.Data.DataTable schema = conn.GetSchema("TABLES"); 
 #>

<# 
    foreach(System.Data.DataRow row in schema.Rows) 
    {  
		manager.StartBlock(row["TABLE_NAME"].ToString()+"Controllers"+".cs");
	 #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using <#=config.ModelNameSpace#>;
using <#=config.IServicesNameSpace#>;

namespace <#=config.ControllersNameSpace#>
{	
	/// <summary>
	/// <#=row["TABLE_NAME"].ToString()#>Controllers
	/// </summary>	
	[Produces("application/json")]
	[Route("api/[controller]")]
    [ApiController]
	public class <#=row["TABLE_NAME"].ToString()#>Controller : ControllerBase
    { 
		 readonly I<#=row["TABLE_NAME"].ToString()#>Services _<#=row["TABLE_NAME"].ToString()#>Services;

		 /// <summary>
        /// 构造函数
        /// </summary>
        /// <returns></returns>
        public <#=row["TABLE_NAME"].ToString()#>Controller(I<#=row["TABLE_NAME"].ToString()#>Services <#=row["TABLE_NAME"].ToString()#>Services)
        {
            _<#=row["TABLE_NAME"].ToString()#>Services = <#=row["TABLE_NAME"].ToString()#>Services;
        }
		/// <summary>
		///查询所有数据
		/// </summary>	
		 [HttpGet]
        public async Task<List<<#=row["TABLE_NAME"].ToString()#>>> Get()
        {
            return await _<#=row["TABLE_NAME"].ToString()#>Services.Query();
        }

		/// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="page"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("getpage")]
        public async Task<PageModel<<#=row["TABLE_NAME"].ToString()#>>> GetPage(int page)
        {
            return await _<#=row["TABLE_NAME"].ToString()#>Services.Query("", page, 10, "");
        }

        /// <summary>
		///根据id查询数据
		/// </summary>
        [HttpGet("{id}")]
        public async Task<List<<#=row["TABLE_NAME"].ToString()#>>> Get(int id)
        {
            return await _<#=row["TABLE_NAME"].ToString()#>Services.Query(c => c.ID == id);
        }

        /// <summary>
		/// 使用post方法添加数据
		/// </summary>
        [HttpPost]
       public async Task<MessageModel<string>> Post([FromBody] <#=row["TABLE_NAME"].ToString()#> <#=row["TABLE_NAME"].ToString()#>)
        {
			var data = new MessageModel<string>();

            var id = (await _<#=row["TABLE_NAME"].ToString()#>Services.Add(<#=row["TABLE_NAME"].ToString()#>));
            data.success = id > 0;
            if (data.success)
            {
                data.response = id.ObjToString();
                data.msg = "添加成功";
            }

            return data;
        }

         /// <summary>
		///更新数据
		/// </summary>
        [HttpPost]
        [Route("update")]
        public async Task<MessageModel<string>> Update([FromBody] <#=row["TABLE_NAME"].ToString()#> <#=row["TABLE_NAME"].ToString()#>)
        {
			var data = new MessageModel<string>();
            if (<#=row["TABLE_NAME"].ToString()#> != null && <#=row["TABLE_NAME"].ToString()#>.ID > 0)
            {
                var id = (await _<#=row["TABLE_NAME"].ToString()#>Services.Update(<#=row["TABLE_NAME"].ToString()#>));
                data.success = id;
                if (data.success)
                {
                    data.response = "id为" +<#=row["TABLE_NAME"].ToString()#>.ID.ToString() + "的数据更新成功";
                    data.msg = "更新成功";
                }
                else
                {
                    data.response = "id为" +<#=row["TABLE_NAME"].ToString()#>.ID.ToString() + "的数据不存在";
                }
            }

            return data;
        }

        /// <summary>
		/// 根据id使用get方法删除数据
		/// </summary>
        [HttpGet]
        [Route("delete")]
		 public async Task<MessageModel<string>> Delete(int id)
        {
            var flag = (await _<#=row["TABLE_NAME"].ToString()#>Services.DeleteById(id));
            var data = new MessageModel<string>();
            data.success = flag;
            if (flag)
            {
                data.response = id.ToString()+"数据删除";
                data.msg = "删除成功";
            }
            else
            {
                data.response ="id为"+ id.ToString() + "的数据找不到";
                data.msg = "删除失败";
            }

            return data;
        }

		/// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [Route("deletemuch")]
        public async Task<MessageModel<string>> DeleteMuch([FromBody] object[] id)
        {
            var flag = (await _<#=row["TABLE_NAME"].ToString()#>Services.DeleteByIds(id));
            var data = new MessageModel<string>();
            data.success = flag;
            if (flag)
            {
                data.response = string.Join(",", id) + "数据删除";
                data.msg = "删除成功";
            }
            else
            {
                data.response = "id为" + id.ToString() + "的数据找不到";
                data.msg = "删除失败";
            }

            return data;
        }
    }
}

	<# 
		manager.EndBlock(); 
		} 

		
		manager.Process(true);
	}
	#> 

